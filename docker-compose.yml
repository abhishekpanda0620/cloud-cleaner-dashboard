services:
  postgres:
    image: postgres:17-alpine
    container_name: cloud-cleaner-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=cloud_cleaner_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-toor}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cloud-cleaner-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: cloud-cleaner-redis
    ports:
      - "6379:6379"
    networks:
      - cloud-cleaner-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cloud-cleaner-backend
    ports:
      - "8084:8084"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-ap-south-1}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - NOTIFICATION_EMAIL_RECIPIENTS=${NOTIFICATION_EMAIL_RECIPIENTS}
      - SMTP_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SENDER_EMAIL=${SENDER_EMAIL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PORT=8084
      - HOST=0.0.0.0
      - DEBUG=${DEBUG:-false}
      - DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD:-toor}@postgres:5432/cloud_cleaner_db
    env_file:
      - ./backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cloud-cleaner-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8084/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cloud-cleaner-celery-worker
    command: celery -A core.celery_app worker --loglevel=info
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-ap-south-1}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - NOTIFICATION_EMAIL_RECIPIENTS=${NOTIFICATION_EMAIL_RECIPIENTS}
      - SMTP_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SENDER_EMAIL=${SENDER_EMAIL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD:-toor}@postgres:5432/cloud_cleaner_db
    env_file:
      - ./backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cloud-cleaner-network
    restart: unless-stopped

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cloud-cleaner-celery-beat
    command: celery -A core.celery_app beat --loglevel=info --scheduler redbeat.RedBeatScheduler
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-ap-south-1}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - NOTIFICATION_EMAIL_RECIPIENTS=${NOTIFICATION_EMAIL_RECIPIENTS}
      - SMTP_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SENDER_EMAIL=${SENDER_EMAIL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD:-toor}@postgres:5432/cloud_cleaner_db
    env_file:
      - ./backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cloud-cleaner-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cloud-cleaner-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8084/api
      - NODE_ENV=production
    env_file:
      - ./frontend/.env
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cloud-cleaner-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  cloud-cleaner-network:
    driver: bridge

volumes:
  postgres_data: