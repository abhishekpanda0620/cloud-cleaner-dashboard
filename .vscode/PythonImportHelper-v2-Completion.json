[
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "get_ebs_client",
        "importPath": "core.aws_client",
        "description": "core.aws_client",
        "isExtraImport": true,
        "detail": "core.aws_client",
        "documentation": {}
    },
    {
        "label": "get_ec2_client",
        "importPath": "core.aws_client",
        "description": "core.aws_client",
        "isExtraImport": true,
        "detail": "core.aws_client",
        "documentation": {}
    },
    {
        "label": "get_iam_client",
        "importPath": "core.aws_client",
        "description": "core.aws_client",
        "isExtraImport": true,
        "detail": "core.aws_client",
        "documentation": {}
    },
    {
        "label": "get_s3_client",
        "importPath": "core.aws_client",
        "description": "core.aws_client",
        "isExtraImport": true,
        "detail": "core.aws_client",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "jmespath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jmespath",
        "description": "jmespath",
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "jmespath",
        "description": "jmespath",
        "isExtraImport": true,
        "detail": "jmespath",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "ec2",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "ebs",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "s3",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "iam",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "notifications",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.api.ebs",
        "description": "backend.api.ebs",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter()\n@router.get(\"/unused\")\nasync def get_unused_ebs() -> Dict[str, List[Dict[str, Any]]]:\n    \"\"\"\n    Get list of unattached EBS volumes (potential cleanup candidates)\n    Returns:\n        Dictionary containing list of unused EBS volumes\n    \"\"\"\n    try:",
        "detail": "backend.api.ebs",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.ebs",
        "description": "backend.api.ebs",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/unused\")\nasync def get_unused_ebs() -> Dict[str, List[Dict[str, Any]]]:\n    \"\"\"\n    Get list of unattached EBS volumes (potential cleanup candidates)\n    Returns:\n        Dictionary containing list of unused EBS volumes\n    \"\"\"\n    try:\n        ec2_client = get_ebs_client()",
        "detail": "backend.api.ebs",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.api.ec2",
        "description": "backend.api.ec2",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter()\n@router.get(\"/unused\")\nasync def get_unused_instances() -> Dict[str, List[Dict[str, Any]]]:\n    \"\"\"\n    Get list of stopped EC2 instances that have been stopped for more than 7 days\n    Returns:\n        Dictionary containing list of unused EC2 instances\n    \"\"\"\n    try:",
        "detail": "backend.api.ec2",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.ec2",
        "description": "backend.api.ec2",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/unused\")\nasync def get_unused_instances() -> Dict[str, List[Dict[str, Any]]]:\n    \"\"\"\n    Get list of stopped EC2 instances that have been stopped for more than 7 days\n    Returns:\n        Dictionary containing list of unused EC2 instances\n    \"\"\"\n    try:\n        ec2_client = get_ec2_client()",
        "detail": "backend.api.ec2",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.api.iam",
        "description": "backend.api.iam",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter()\n@router.get(\"/unused\")\nasync def get_unused_iam_roles() -> Dict[str, List[Dict[str, Any]]]:\n    \"\"\"\n    Get list of IAM roles that haven't been used in 90+ days\n    Returns:\n        Dictionary containing list of potentially unused IAM roles\n    \"\"\"\n    try:",
        "detail": "backend.api.iam",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.iam",
        "description": "backend.api.iam",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/unused\")\nasync def get_unused_iam_roles() -> Dict[str, List[Dict[str, Any]]]:\n    \"\"\"\n    Get list of IAM roles that haven't been used in 90+ days\n    Returns:\n        Dictionary containing list of potentially unused IAM roles\n    \"\"\"\n    try:\n        iam_client = get_iam_client()",
        "detail": "backend.api.iam",
        "documentation": {}
    },
    {
        "label": "get_unused_notifications",
        "kind": 2,
        "importPath": "backend.api.notifications",
        "description": "backend.api.notifications",
        "peekOfCode": "def get_unused_notifications():\n    return {\"msg\": \"Notifications cleanup endpoint placeholder\"}",
        "detail": "backend.api.notifications",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.notifications",
        "description": "backend.api.notifications",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/unused\")\ndef get_unused_notifications():\n    return {\"msg\": \"Notifications cleanup endpoint placeholder\"}",
        "detail": "backend.api.notifications",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.api.s3",
        "description": "backend.api.s3",
        "peekOfCode": "logger = logging.getLogger(__name__)\nrouter = APIRouter()\n@router.get(\"/unused\")\nasync def get_unused_s3_buckets() -> Dict[str, List[Dict[str, Any]]]:\n    \"\"\"\n    Get list of S3 buckets that haven't been accessed in 90+ days\n    Returns:\n        Dictionary containing list of potentially unused S3 buckets\n    \"\"\"\n    try:",
        "detail": "backend.api.s3",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.s3",
        "description": "backend.api.s3",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/unused\")\nasync def get_unused_s3_buckets() -> Dict[str, List[Dict[str, Any]]]:\n    \"\"\"\n    Get list of S3 buckets that haven't been accessed in 90+ days\n    Returns:\n        Dictionary containing list of potentially unused S3 buckets\n    \"\"\"\n    try:\n        s3_client = get_s3_client()",
        "detail": "backend.api.s3",
        "documentation": {}
    },
    {
        "label": "AWSClientFactory",
        "kind": 6,
        "importPath": "backend.core.aws_client",
        "description": "backend.core.aws_client",
        "peekOfCode": "class AWSClientFactory:\n    \"\"\"Factory class for creating and managing AWS service clients\"\"\"\n    def __init__(self):\n        self._session: Optional[boto3.Session] = None\n    @property\n    def session(self) -> boto3.Session:\n        \"\"\"Get or create boto3 session with configured credentials\"\"\"\n        if self._session is None:\n            try:\n                self._session = boto3.Session(",
        "detail": "backend.core.aws_client",
        "documentation": {}
    },
    {
        "label": "get_aws_client_factory",
        "kind": 2,
        "importPath": "backend.core.aws_client",
        "description": "backend.core.aws_client",
        "peekOfCode": "def get_aws_client_factory() -> AWSClientFactory:\n    \"\"\"Get singleton instance of AWSClientFactory\"\"\"\n    return AWSClientFactory()\n# Convenience functions for getting specific clients\ndef get_ec2_client():\n    \"\"\"Get EC2 client\"\"\"\n    return get_aws_client_factory().get_client('ec2')\ndef get_s3_client():\n    \"\"\"Get S3 client\"\"\"\n    return get_aws_client_factory().get_client('s3')",
        "detail": "backend.core.aws_client",
        "documentation": {}
    },
    {
        "label": "get_ec2_client",
        "kind": 2,
        "importPath": "backend.core.aws_client",
        "description": "backend.core.aws_client",
        "peekOfCode": "def get_ec2_client():\n    \"\"\"Get EC2 client\"\"\"\n    return get_aws_client_factory().get_client('ec2')\ndef get_s3_client():\n    \"\"\"Get S3 client\"\"\"\n    return get_aws_client_factory().get_client('s3')\ndef get_ebs_client():\n    \"\"\"Get EBS client (EC2 client is used for EBS operations)\"\"\"\n    return get_aws_client_factory().get_client('ec2')\ndef get_iam_client():",
        "detail": "backend.core.aws_client",
        "documentation": {}
    },
    {
        "label": "get_s3_client",
        "kind": 2,
        "importPath": "backend.core.aws_client",
        "description": "backend.core.aws_client",
        "peekOfCode": "def get_s3_client():\n    \"\"\"Get S3 client\"\"\"\n    return get_aws_client_factory().get_client('s3')\ndef get_ebs_client():\n    \"\"\"Get EBS client (EC2 client is used for EBS operations)\"\"\"\n    return get_aws_client_factory().get_client('ec2')\ndef get_iam_client():\n    \"\"\"Get IAM client\"\"\"\n    return get_aws_client_factory().get_client('iam')",
        "detail": "backend.core.aws_client",
        "documentation": {}
    },
    {
        "label": "get_ebs_client",
        "kind": 2,
        "importPath": "backend.core.aws_client",
        "description": "backend.core.aws_client",
        "peekOfCode": "def get_ebs_client():\n    \"\"\"Get EBS client (EC2 client is used for EBS operations)\"\"\"\n    return get_aws_client_factory().get_client('ec2')\ndef get_iam_client():\n    \"\"\"Get IAM client\"\"\"\n    return get_aws_client_factory().get_client('iam')",
        "detail": "backend.core.aws_client",
        "documentation": {}
    },
    {
        "label": "get_iam_client",
        "kind": 2,
        "importPath": "backend.core.aws_client",
        "description": "backend.core.aws_client",
        "peekOfCode": "def get_iam_client():\n    \"\"\"Get IAM client\"\"\"\n    return get_aws_client_factory().get_client('iam')",
        "detail": "backend.core.aws_client",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.core.aws_client",
        "description": "backend.core.aws_client",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass AWSClientFactory:\n    \"\"\"Factory class for creating and managing AWS service clients\"\"\"\n    def __init__(self):\n        self._session: Optional[boto3.Session] = None\n    @property\n    def session(self) -> boto3.Session:\n        \"\"\"Get or create boto3 session with configured credentials\"\"\"\n        if self._session is None:\n            try:",
        "detail": "backend.core.aws_client",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "backend.core.config",
        "description": "backend.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    \"\"\"Application settings loaded from environment variables\"\"\"\n    # AWS Configuration\n    aws_access_key_id: str\n    aws_secret_access_key: str\n    aws_region: str = \"ap-south-1\"\n    # Notification Configuration\n    slack_webhook_url: Optional[str] = None\n    # Server Configuration\n    port: int = 8084",
        "detail": "backend.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "backend.core.config",
        "description": "backend.core.config",
        "peekOfCode": "settings = Settings()",
        "detail": "backend.core.config",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.env.bin.jp",
        "description": "backend.env.bin.jp",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('expression')\n    parser.add_argument('-f', '--filename',\n                        help=('The filename containing the input data.  '\n                              'If a filename is not given then data is '\n                              'read from stdin.'))\n    parser.add_argument('--ast', action='store_true',\n                        help=('Pretty print the AST, do not search the data.'))\n    args = parser.parse_args()",
        "detail": "backend.env.bin.jp",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Create FastAPI app\napp = FastAPI(\n    title=settings.app_name,\n    description=\"API for identifying and managing unused AWS resources\",\n    version=\"1.0.0\",\n    debug=settings.debug\n)\n# Configure CORS\napp.add_middleware(",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "app = FastAPI(\n    title=settings.app_name,\n    description=\"API for identifying and managing unused AWS resources\",\n    version=\"1.0.0\",\n    debug=settings.debug\n)\n# Configure CORS\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # In production, specify exact origins",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    }
]